"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/patient/pharmacy/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BASE_URL: function() { return /* binding */ API_BASE_URL; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   apiFetch: function() { return /* binding */ apiFetch; }\n/* harmony export */ });\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"(app-pages-browser)/./node_modules/js-cookie/dist/js.cookie.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5000\";\nasync function apiFetch(path) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const token = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"token\");\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    if (options.headers) Object.assign(headers, options.headers);\n    if (options.auth !== false && token) headers[\"Authorization\"] = \"Bearer \".concat(token);\n    const res = await fetch(\"\".concat(API_BASE_URL).concat(path), {\n        ...options,\n        headers,\n        cache: \"no-store\"\n    });\n    if (!res.ok) {\n        const text = await res.text();\n        // Handle 401 specifically - clear token and redirect\n        if (res.status === 401) {\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"token\");\n            if (true) {\n                window.location.href = \"/auth/login\";\n            }\n        }\n        throw new Error(text || \"Request failed: \".concat(res.status));\n    }\n    try {\n        return await res.json();\n    } catch (e) {\n        // some endpoints may not return JSON in error cases\n        return {};\n    }\n}\nconst api = {\n    // Auth\n    register: (body)=>apiFetch(\"/auth/register\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    login: (body)=>apiFetch(\"/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    verifyOtp: (body)=>apiFetch(\"/auth/verify-otp\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    resendOtp: (body)=>apiFetch(\"/auth/resend-otp\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    forgotPassword: (body)=>apiFetch(\"/auth/forgot-password\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    resetPassword: (body)=>apiFetch(\"/auth/reset-password\", {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            auth: false\n        }),\n    me: ()=>apiFetch(\"/auth/me\", {\n            method: \"GET\"\n        }),\n    // Core entities\n    hospitals: {\n        list: ()=>apiFetch(\"/hospitals\", {\n                method: \"GET\",\n                auth: false\n            }),\n        get: (id)=>apiFetch(\"/hospitals/\".concat(id), {\n                method: \"GET\",\n                auth: false\n            })\n    },\n    departments: {\n        list: (q)=>apiFetch(\"/departments\".concat(q ? \"?\".concat(q.toString()) : \"\"), {\n                method: \"GET\",\n                auth: false\n            }),\n        byHospital: (id)=>apiFetch(\"/departments/hospital/\".concat(id), {\n                method: \"GET\",\n                auth: false\n            })\n    },\n    doctors: {\n        list: (q)=>apiFetch(\"/doctors\".concat(q ? \"?\".concat(q.toString()) : \"\"), {\n                method: \"GET\",\n                auth: false\n            }),\n        byHospitalDepartment: (hospitalId, departmentId)=>apiFetch(\"/doctors/hospital/\".concat(hospitalId, \"/department/\").concat(departmentId), {\n                method: \"GET\",\n                auth: false\n            }),\n        get: (id)=>apiFetch(\"/doctors/\".concat(id), {\n                method: \"GET\",\n                auth: false\n            })\n    },\n    insurance: {\n        list: ()=>apiFetch(\"/insurance\", {\n                method: \"GET\",\n                auth: false\n            })\n    },\n    teleconsult: {\n        consultationTypes: ()=>apiFetch(\"/teleconsultation/consultation-types\", {\n                method: \"GET\",\n                auth: false\n            }),\n        insuranceOptions: ()=>apiFetch(\"/teleconsultation/insurance-options\", {\n                method: \"GET\",\n                auth: false\n            }),\n        create: (body)=>apiFetch(\"/teleconsultation\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        mine: ()=>apiFetch(\"/teleconsultation/my-consultations\", {\n                method: \"GET\"\n            }),\n        get: (id)=>apiFetch(\"/teleconsultation/\".concat(id), {\n                method: \"GET\"\n            }),\n        doctor: (doctorId)=>apiFetch(\"/teleconsultation/doctor/\".concat(doctorId, \"/consultations\"), {\n                method: \"GET\"\n            })\n    },\n    appointments: {\n        availableSlots: (params)=>{\n            const searchParams = new URLSearchParams(params);\n            return apiFetch(\"/appointments/available-slots?\".concat(searchParams.toString()), {\n                method: \"GET\",\n                auth: false\n            });\n        },\n        create: (body)=>apiFetch(\"/appointments\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        my: ()=>apiFetch(\"/appointments/my-appointments\", {\n                method: \"GET\"\n            }),\n        myDoctor: ()=>apiFetch(\"/appointments/my-doctor-appointments\", {\n                method: \"GET\"\n            }),\n        reassign: (id, body)=>apiFetch(\"/appointments/\".concat(id, \"/reassign\"), {\n                method: \"PATCH\",\n                body: JSON.stringify(body)\n            }),\n        cancel: (id)=>apiFetch(\"/appointments/\".concat(id, \"/cancel\"), {\n                method: \"PATCH\"\n            }),\n        get: (id)=>apiFetch(\"/appointments/\".concat(id), {\n                method: \"GET\"\n            })\n    },\n    payments: {\n        checkout: (body)=>apiFetch(\"/payments/checkout\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        verify: (body)=>apiFetch(\"/payments/verify\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            })\n    },\n    meetings: {\n        user: (userId)=>apiFetch(\"/meetings/user/\".concat(userId), {\n                method: \"GET\"\n            }),\n        get: (id)=>apiFetch(\"/meetings/\".concat(id), {\n                method: \"GET\"\n            })\n    },\n    prescriptions: {\n        create: (body)=>apiFetch(\"/prescriptions\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        byPatient: (patientId)=>apiFetch(\"/prescriptions/patient/\".concat(patientId), {\n                method: \"GET\"\n            }),\n        myAuthored: ()=>apiFetch(\"/prescriptions/doctor-authored\", {\n                method: \"GET\"\n            })\n    },\n    ai: {\n        symptomChecker: (body)=>apiFetch(\"/ai/symptom-checker\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        bookAppointmentHelper: (body)=>apiFetch(\"/ai/book-appointment-helper\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        prescriptionHelper: (body)=>apiFetch(\"/ai/prescription-helper\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        referralSupport: (body)=>apiFetch(\"/ai/referral-support\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        healthTips: (body)=>apiFetch(\"/ai/health-tips\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            })\n    },\n    notifications: {\n        list: ()=>apiFetch(\"/notifications\", {\n                method: \"GET\"\n            }),\n        markRead: (id)=>apiFetch(\"/notifications/\".concat(id, \"/read\"), {\n                method: \"PUT\"\n            })\n    },\n    pharmacy: {\n        list: ()=>apiFetch(\"/pharmacies\", {\n                method: \"GET\",\n                auth: false\n            }),\n        near: (lat, lng, radius)=>apiFetch(\"/pharmacies/near?lat=\".concat(lat, \"&lng=\").concat(lng).concat(radius ? \"&radius=\".concat(radius) : \"\"), {\n                method: \"GET\",\n                auth: false\n            }),\n        get: (id)=>apiFetch(\"/pharmacies/\".concat(id), {\n                method: \"GET\",\n                auth: false\n            }),\n        prescriptions: ()=>apiFetch(\"/prescriptions/my\", {\n                method: \"GET\"\n            })\n    },\n    orders: {\n        create: (body)=>apiFetch(\"/orders\", {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }),\n        my: (patientId)=>apiFetch(\"/orders/patients/\".concat(patientId, \"/orders\"), {\n                method: \"GET\"\n            })\n    },\n    uploads: {\n        image: async (file)=>{\n            const token = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"token\");\n            const form = new FormData();\n            form.append(\"image\", file);\n            const res = await fetch(\"\".concat(API_BASE_URL, \"/upload/image\"), {\n                method: \"POST\",\n                headers: token ? {\n                    Authorization: \"Bearer \".concat(token)\n                } : undefined,\n                body: form\n            });\n            if (!res.ok) throw new Error(\"Upload failed\");\n            return res.json();\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});